<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="creating">
  <title>Creating and Importing Projects</title>

  <section id="creating-sect-creating-project">
    <title>Creating a Maven Project</title>

    <para>When using Maven, project creation takes place through the use of a
    Maven archetype. In Eclipse, project creation takes place via the new
    project wizard. The new project wizard inside of Eclipse offers a plethora
    of templates for creating new projects. The m2eclipse plugin improves upon
    this wizard to provide the following additional capabilities:<itemizedlist>
        <listitem>
          <para>Checking out a Maven project from a SCM repository</para>
        </listitem>

        <listitem>
          <para>Creating a Maven project using a Maven archetype</para>
        </listitem>

        <listitem>
          <para>Creating a Maven <acronym>POM</acronym> file</para>
        </listitem>
      </itemizedlist></para>

    <para>As shown in <xref linkend="fig-creating-new" />, all three of these
    options are important to developers using Maven. Letâ€™s take a look at each
    one.</para>

    <figure id="fig-creating-new">
      <title>Creating a New Project with m2eclipse Wizards</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/creating_create-wizard.png" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/web/creating_create-wizard.png"
                     scale="50" />
        </imageobject>
      </mediaobject>
    </figure>

    <section id="creating-sect-checking-out-scm">
      <title>Checking Out a Maven Project from SCM</title>

      <para>m2eclipse provides the ability to check out a project directly
      from a SCM repository. Simply enter the SCM information for a project
      and it will check it out for you to a location of your choice as shown
      in <xref linkend="fig-creating-new-checkout" />:</para>

      <figure id="fig-creating-new-checkout">
        <title>Checkout a New Project from Subversion</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_checking-out.png"
                       scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_checking-out.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>There are additional options in this dialog for specifying a
      particular revision by browsing the revisions in a Subversion repository
      or by simply entering the revision number manually. These features reuse
      of some of the features in the Subclipse plugin to interact with the
      Subversion repository. The m2eclipse plugin supports the following SCM
      providers:<itemizedlist>
          <listitem>
            <para>Bazaar</para>
          </listitem>

          <listitem>
            <para>Clearcase</para>
          </listitem>

          <listitem>
            <para>CVS</para>
          </listitem>

          <listitem>
            <para>git</para>
          </listitem>

          <listitem>
            <para>hg</para>
          </listitem>

          <listitem>
            <para>Perforce</para>
          </listitem>

          <listitem>
            <para>Starteam</para>
          </listitem>

          <listitem>
            <para>Subversion</para>
          </listitem>

          <listitem>
            <para>Synergy</para>
          </listitem>

          <listitem>
            <para>Visual SourceSafe</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section id="creating-sect-m2e-create-archetype">
      <title>Creating a Maven Project from a Maven Archetype</title>

      <para>m2eclipse offers the ability to create a Maven project using a
      Maven Archetype. There are many Maven Archetypes provided in the list
      that comes with m2eclipse as shown in <xref
      linkend="fig-creating-new-archetype" />.</para>

      <figure id="fig-creating-new-archetype">
        <title>Creating a New Project with a Maven Archetype</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_new-maven.png" scalefit="1"
                       width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_new-maven.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The list of archetypes in <xref
      linkend="fig-creating-new-archetype" /> is a list generated by something
      called the Nexus Indexer. Nexus is a repository manager which is
      introduced in "Repository Management with Nexus", a free book available
      from Sonatype which can be read online here: <ulink
      url="???">http://www.sonatype.com/books/nexus-book/reference/</ulink>.
      The Nexus indexer is a file which contains an index of the entire Maven
      repository, and m2eclipse uses it to list all of the available
      archetypes in the entire Maven repository. When this chapter was last
      updated, m2eclipse had approximately ninety archetypes in this Archetype
      dialog. Highlights of this list include:<itemizedlist>
          <listitem>
            <para>Standard Maven Archetypes to create</para>

            <itemizedlist>
              <listitem>
                <para>Maven Plugins</para>
              </listitem>

              <listitem>
                <para>Simple Web Applications</para>
              </listitem>

              <listitem>
                <para>Simple Projects</para>
              </listitem>

              <listitem>
                <para>New Maven Archetypes</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><ulink
            url="http://databinder.net/site/show/overview">Databinder</ulink>
            Archetypes (data-driven Wicket Applications) under
            <varname>net.databinder</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://cocoon.apache.org/">Apache Cocoon</ulink>
            Archetypes under <varname>org.apache.cocoon</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://directory.apache.org">Apache Directory
            Server</ulink> Archetypes under
            <varname>org.apache.directory.server</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://geronimo.apache.org">Apache
            Geronimo</ulink> Archetypes under
            <varname>org.apache.geronimo.buildsupport</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://myfaces.apache.org">Apache
            MyFaces</ulink> Archetypes under
            <varname>org.apache.myfaces.buildtools</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://tapestry.apache.org">Apache
            Tapestry</ulink> Archetypes under
            <varname>org.apache.tapestry</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://wicket.apache.org">Apache Wicket</ulink>
            Archetypes under <varname>org.apache.wicket</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://appfuse.org/display/APF/Home">AppFuse</ulink>
            Archetypes under <varname>org.appfuse.archetypes</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://cargo.codehaus.org/">Codehaus
            Cargo</ulink> Archetypes under
            <varname>org.codehaus.cargo</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://castor.codehaus.org/">Codehaus
            Castor</ulink> Archetypes under
            <varname>org.codehaus.castor</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://groovy.codehaus.org/GMaven">Groovy-based
            Maven Plugin</ulink> Archetypes (deprecated)<footnoteref
            linkend="foot-gmaven" /> under
            <varname>org.codehaus.mojo.groovy</varname></para>
          </listitem>

          <listitem>
            <para>Jini Archetypes</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://mule.mulesource.org/display/MULE/Home">Mule</ulink>
            Archetypes under <varname>org.mule.tools</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://fractal.objectweb.org/index.html">Objectweb
            Fractal</ulink> Archetypes under
            <varname>org.objectweb.fractal</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://petals.objectweb.org/index.html">Objectweb
            Petals</ulink> Archetypes under
            <varname>org.objectweb.petals</varname></para>
          </listitem>

          <listitem>
            <para>ops4j Archetypes under <varname>org.ops4j</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.parancoe.org/">Parancoe</ulink> under
            <varname>org.parancoe</varname></para>
          </listitem>

          <listitem>
            <para>slf4j Archetypes under <varname>org.slf4j</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.springframework.org">Springframework</ulink>
            <acronym>OSGI</acronym> and Web Services Archetypes under
            <varname>org.springframework</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.trailsframework.org/">Trails
            Framework</ulink> Archetypes under
            <varname>org.trailsframework</varname></para>
          </listitem>
        </itemizedlist></para>

      <para><footnote id="foot-gmaven">
          <para>Don't use the Groovy Maven Plugin in Codehaus' Mojo project.
          Jason Dillon has moved the Groovy Maven integration to the Groovy
          project in codehaus. For more information see <ulink
          url="http://groovy.codehaus.org/GMaven">http://groovy.codehaus.org/GMaven</ulink>.</para>
        </footnote>And these were just the archetypes that were listed under
      the Nexus Indexer Catalog, if you switch Catalogs you'll see other
      archetypes. While your results may vary, the following additional
      archetypes were available in the Internal Catalog:<itemizedlist>
          <listitem>
            <para><ulink url="http://www.atlassian.com">Atlassian
            Confluence</ulink> Plugin Archetype under
            <varname>com.atlassian.maven.archetypes</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://struts.apache.org">Apache Struts</ulink>
            Archetypes under <varname>org.apache.struts</varname></para>
          </listitem>

          <listitem>
            <para>Apache Shale Archetypes under
            <varname>org.apache.shale</varname></para>
          </listitem>
        </itemizedlist></para>

      <para>A catalog is simply a reference to a repository index. You can
      manage the set of catalogs that the m2eclipse plugin knows about by
      clicking on the <guibutton>Configure... </guibutton>button next to the
      catalog drop down. If you have your own archetypes to add to this list,
      you can click on <guibutton>Add Archetype...</guibutton>.</para>

      <para>Once you choose an archetype, Maven will retrieve the appropriate
      artifact from the Maven repository and create a new Eclipse project with
      the selected archetype.</para>
    </section>

    <section id="creating-sect-creating-module">
      <title>Creating a Maven Module</title>

      <para>m2eclipse provides the ability to create a Maven module. Creating
      a Maven module is almost identical to creating a Maven project as it
      also creates a new Maven project using a Maven archetype. However, a
      Maven module is a subproject of another Maven project typically known as
      a parent project.</para>

      <figure id="fig-creating-new-module">
        <title>Creating a New Maven Module</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_new-module.png" scalefit="1"
                       width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_new-module.png"
                       scale="100" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>When creating a new Maven module you must select a parent project
      that already exists inside of Eclipse. Clicking the browse button
      displays a list of projects that already exist as shown in <xref
      linkend="fig-creating-select-parent" />:</para>

      <figure id="fig-creating-select-parent">
        <title>Selecting a Parent Project for a New Maven Module</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_select-project.png"
                       scalefit="1" width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_select-project.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After selecting a parent project from the list, you are returned
      to the New Maven Module window and the Parent Project field is populated
      as shown in <xref linkend="fig-creating-new-module" />. Clicking
      <guibutton>Next</guibutton> will then display the standard list of
      archetypes from <xref linkend="creating-sect-m2e-create-archetype" /> so
      you can choose which one should be used to create the Maven
      module.</para>
    </section>
  </section>

  <section id="creating-sect-creating-pom">
    <title>Create a Maven POM File</title>

    <para>Another important feature m2eclipse offers is the ability to create
    a new Maven <acronym>POM</acronym> file. m2eclipse provides a wizard to
    easily create a new <acronym>POM</acronym> file inside of a project that
    is already in Eclipse. This POM creation wizard is shown in <xref
    linkend="fig-creating-create-pom" />:</para>

    <figure id="fig-creating-create-pom">
      <title>Creating a New POM</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/creating_create-pom.png" scalefit="1"
                     width="100%" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/web/creating_create-pom.png" 
                     scale="50"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Creating a new Maven <acronym>POM</acronym> is just a matter of
    selecting a project, entering the Group Id, Artifact Id, Version, choosing
    the Packaging type, and providing a Name into the fields provided and
    m2eclipse. Click the Next button to start adding dependencies.</para>

    <figure id="fig-creating-add-dependencies">
      <title>Adding Dependencies to a New POM</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/creating_additional-depends.png"
                     scalefit="1" width="100%" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/web/creating_additional-depends.png"
                     scale="50" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>As you can see in <xref linkend="fig-creating-add-dependencies" />
    here are no dependencies in the <acronym>POM</acronym> yet. Just click the
    <guibutton>Add</guibutton> button to query the central Maven repository
    for dependencies as shown next in <xref
    linkend="fig-creating-query-depend" />:</para>

    <figure id="fig-creating-query-depend">
      <title>Querying the Central Repository for Dependencies</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/creating_add-dependency.png"
                     scalefit="1" width="100%" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/web/creating_add-dependency.png"
                     scale="50" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Querying for dependencies is as easy as entering the
    <varname>groupId</varname> for the artifact you need. <xref
    linkend="fig-creating-query-depend" /> shows a query for
    <varname>org.apache.commons</varname> with <varname>commons-vfs</varname>
    expanded to see which versions are available. Highlighting the
    <varname>1.1-SNAPSHOT</varname> version of <varname>commons-vfs</varname>
    and clicking <guibutton>OK</guibutton> takes you back to the dependency
    selection where you can either query for more artifacts or just click
    finish to create the <acronym>POM</acronym>. When you search for
    dependencies, m2eclipse is making use of the same Nexus repository index
    that is used in the Nexus Repository Manager, a repository manager
    introduced in "Repository Management with Nexus" (<ulink
    url="http://www.sonatype.com/books/nexus-book/reference/">http://www.sonatype.com/books/nexus-book/reference/</ulink>).</para>

    <para>Now that the youâ€™ve seen the m2eclipse features for creating a new
    project, letâ€™s look at a similar set of features for importing projects
    into Eclipse.</para>
  </section>

  <section id="creating-sect-importing-projects">
    <title>Importing Maven Projects</title>

    <para>m2eclipse provides three options for importing a Maven project into
    Eclipse including:<itemizedlist>
        <listitem>
          <para>Import an existing Maven project</para>
        </listitem>

        <listitem>
          <para>Check out a Maven project from SCM</para>
        </listitem>

        <listitem>
          <para>Materialize a Maven project</para>
        </listitem>
      </itemizedlist></para>

    <para><xref linkend="fig-creating-import" /> shows the wizard for
    importing projects with the options for Maven provided by
    m2eclipse:</para>

    <figure id="fig-creating-import">
      <title>Importing a Maven Project</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/creating_import.png" scale=""
                     scalefit="1" width="100%" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center" fileref="figs/web/creating_import.png"
                     scale="50" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The dialog in <xref linkend="fig-creating-import" /> is displayed by
    using the <guiicon>File</guiicon>, <guimenuitem>Import</guimenuitem>
    command in Eclipse and then filtering the options by entering the word
    maven in the filter field. As noted above, there are three options
    available for importing a Maven project into Eclipse including: Maven
    Projects, Check out Maven Project from Subversion, and Materialize Maven
    Projects.</para>

    <para>Importing a Maven project from Subversion is identical to the
    creation of a Maven project from Subversion as discussed in the previous
    section so discussion of it would be redundant. Letâ€™s move on now to
    review the other two options for importing a Maven project into
    Eclipse.</para>

    <section id="creating-sect-importing-a-maven-project">
      <title>Importing a Maven Project</title>

      <para>m2eclipse can import a Maven project with an existing
      <filename>pom.xml</filename>. By pointing at the directory where a Maven
      project is located, m2eclipse detects all the Maven
      <acronym>POM</acronym>s in the project and provides a hierarchical list
      of them as shown in <xref linkend="fig-creating-import-multi" />.</para>

      <figure id="fig-creating-import-multi">
        <title>Importing a Multi-module Maven Project</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_import-project.png"
                       scalefit="1" width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_import-project.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para><xref linkend="fig-creating-import-multi" /> displays the view of
      the project being imported. Notice that all the <acronym>POM</acronym>s
      from the project are listed in a hierarchy. This allows you to easily
      select which <acronym>POM</acronym>s (and therefore which projects) that
      you want to be imported into Eclipse. Once you select the project you
      would like to import, m2eclipse will import and build the project(s)
      using Maven.</para>
    </section>

    <section id="creating-sect-materializing-project">
      <title>Materializing a Maven Project</title>

      <para>m2eclipse also offers the ability to "materialize" a Maven
      project. Materialization is similar to the process of checking out a
      Maven project from Subversion, but instead of manually entering the
      <acronym>URL</acronym> to the projectâ€™s Subversion repository, the
      Subversion <acronym>URL</acronym> is discovered from the projectâ€™s root
      <acronym>POM</acronym> file. You can use this feature to "materialize"
      projects from nothing more than a <acronym>POM</acronym> file if the
      <acronym>POM</acronym> file has the appropriate elements to specify the
      location of a source repository. Using this feature, you can browse the
      central Maven repository for projects, and materialize them into Eclipse
      projects. This comes in handy if your project depends on a third-party
      open source library, and you need to get your hands on the source code.
      Instead of tracking down the project web site and figuring out how to
      check it out of Subversion, just use the m2eclipse project to magically
      "materialize" the Eclipse project.</para>

      <para><xref linkend="fig-creating-materialize" /> shows the wizard after
      choosing to materialize Maven projects:</para>

      <figure id="fig-creating-materialize">
        <title>Materializing a Maven Project</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_import2.png" scalefit="1"
                       width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_import2.png" 
                       scale="50"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Notice that the dialog box for Maven artifacts in <xref
      linkend="fig-creating-materialize" /> is empty. This is because no
      projects have been added yet. In order to add a project, you must click
      the <guibutton>Add</guibutton> button on the right side and select a
      dependency to add from the central Maven repository. <xref
      linkend="fig-creating-select-materialize" /> shows how to add a
      project:</para>

      <figure id="fig-creating-select-materialize">
        <title>Selecting Artifact to Materialize</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_add-depend.png" scalefit="1"
                       width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_add-depend.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Upon entering a query, candidate dependencies will be located in
      the local Maven repository. After a few seconds of indexing the local
      Maven repository, the list of candidate dependencies appears. Select the
      dependency to add and click OK so that they are added to the list as
      shown in <xref linkend="fig-creating-materialize-camel" />.</para>

      <figure condition="" id="fig-creating-materialize-camel">
        <title>Materializing Apache Camel</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/creating_import-camel.png"
                       scalefit="1" width="100%" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/web/creating_import-camel.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Upon adding a dependency, you have the option of telling the
      m2eclipse plugin to check out all projects for the artifact.</para>
    </section>
  </section>
</chapter>
